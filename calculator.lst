     1                                  section .data
     2 00000000 5175616C206F207365-     	welcome_msg db	'Qual o seu nome? ',0
     2 00000009 75206E6F6D653F2000 
     3                                  	welcome_msg_size	EQU	$-welcome_msg
     4                                  
     5 00000012 48C3B36C612C2000        	hello_msg db	'Hóla, ',0
     6                                  	hello_msg_size	EQU	$-hello_msg
     7                                  
     8 0000001A 2C2062656D2D76696E-     	hello_cont db	', bem-vindo ao programa de CALC IA-32',0
     8 00000023 646F20616F2070726F-
     8 0000002C 6772616D6120646520-
     8 00000035 43414C432049412D33-
     8 0000003E 3200               
     9                                  	hello_cont_size	EQU	$-hello_cont
    10                                  
    11 00000040 4553434F4C48412055-     	choose_msg	db	'ESCOLHA UMA OPÇÃO:',0dh,0ah
    11 00000049 4D41204F50C387C383-
    11 00000052 4F3A0D0A           
    12                                  	choose_msg_size	EQU	$-choose_msg
    13                                  
    14 00000056 2D313A20534F4D410D-     	sum_msg	db	'-1: SOMA',0dh,0ah
    14 0000005F 0A                 
    15                                  	sum_msg_size EQU	$-sum_msg
    16                                  
    17 00000060 2D323A205355425452-     	sub_msg	db	'-2: SUBTRAÇÃO',0dh,0ah
    17 00000069 41C387C3834F0D0A   
    18                                  	sub_msg_size EQU	$-sub_msg
    19                                  
    20 00000071 2D333A204D554C5449-     	mul_msg	db	'-3: MULTIPLICAÇÃO',0dh,0ah
    20 0000007A 504C494341C387C383-
    20 00000083 4F0D0A             
    21                                  	mul_msg_size EQU	$-mul_msg
    22                                  
    23 00000086 2D343A204449564953-     	div_msg	db	'-4: DIVISÃO',0dh,0ah
    23 0000008F C3834F0D0A         
    24                                  	div_msg_size EQU	$-div_msg
    25                                  
    26 00000094 2D353A204D4F440D0A      	mod_msg	db	'-5: MOD',0dh,0ah
    27                                  	mod_msg_size EQU	$-mod_msg
    28                                  
    29 0000009D 2D363A20534149520D-     	quit_msg	db	'-6: SAIR',0dh,0ah
    29 000000A6 0A                 
    30                                  	quit_msg_size EQU	$-quit_msg
    31                                  
    32 000000A7 446967697465206F20-     	op1_msg db	'Digite o primeiro argumento da operação: ',0
    32 000000B0 7072696D6569726F20-
    32 000000B9 617267756D656E746F-
    32 000000C2 206461206F70657261-
    32 000000CB C3A7C3A36F3A2000   
    33                                  	op1_msg_size	EQU	$-op1_msg
    34                                  
    35 000000D3 446967697465206F20-     	op2_msg db	'Digite o segundo argumento da operação: ',0
    35 000000DC 736567756E646F2061-
    35 000000E5 7267756D656E746F20-
    35 000000EE 6461206F70657261C3-
    35 000000F7 A7C3A36F3A2000     
    36                                  	op2_msg_size	EQU	$-op2_msg
    37                                  
    38 000000FE 4F20726573756C7461-     	result_msg db	'O resultado é: ',0
    38 00000107 646F20C3A93A2000   
    39                                  	result_msg_size	EQU	$-result_msg
    40                                  
    41 0000010F 0D0A                    	new_line	db	0Dh, 0Ah
    42                                  	new_line_size	EQU	$-new_line
    43                                  
    44 00000111 5072657373696F6E65-     	press_enter_msg db 'Pressione enter para voltar ao menu',0
    44 0000011A 20656E746572207061-
    44 00000123 726120766F6C746172-
    44 0000012C 20616F206D656E7500 
    45                                  	press_enter_size EQU $-press_enter_msg
    46                                  
    47                                  
    48                                  section .bss
    49 00000000 <res 00000010>          	user_name	resb	16	; nome do usuário da calculadora
    50 00000010 <res 00000001>          	option	resb	1	; menu option
    51 00000011 <res 0000000B>          	arg1	resb	11	; operandos com até 32 bits (10 algarismos)
    52 0000001C <res 0000000B>          	arg2	resb	11	; operandos com até 32 bits (10 algarismos)
    53 00000027 <res 0000000B>          	resposta resb   11  ; Resultado da operacao
    54 00000032 <res 00000004>          	arg1Int resd	1	; Inteiro do argumento 1
    55 00000036 <res 00000004>          	arg2Int	resd	1	; Inteiro do argumento 2
    56                                  
    57                                  section .text
    58                                  global _start
    59                                  _start:
    60                                  
    61                                  ; Qual o seu nome?
    62 00000000 6A12                    	push welcome_msg_size
    63 00000002 68[00000000]            	push welcome_msg
    64 00000007 E8A3030000              	call put_string
    65                                  
    66                                  ; Get user_name
    67 0000000C 6A10                    	push 16
    68 0000000E 68[00000000]            	push user_name
    69 00000013 E8AE030000              	call get_string
    70                                  
    71                                  ; 'Hóla, '
    72 00000018 6A08                    	push hello_msg_size
    73 0000001A 68[12000000]            	push hello_msg
    74 0000001F E88B030000              	call put_string
    75                                  
    76                                  ; 'user_name'
    77 00000024 68[00000000]            	push user_name
    78 00000029 E85A030000              	call put_name
    79                                  
    80                                  ; ', bem-vindo ao programa de CALC IA-32'
    81 0000002E 6A26                    	push hello_cont_size
    82 00000030 68[1A000000]            	push hello_cont
    83 00000035 E875030000              	call put_string
    84                                  	; Imprime uma new line no terminal
    85 0000003A 6A02                    	push new_line_size
    86 0000003C 68[0F010000]            	push new_line
    87 00000041 E869030000              	call put_string
    88                                  
    89                                  menu:
    90 00000046 C705[32000000]0000-     	mov dword [arg1Int],0
    90 0000004E 0000               
    91 00000050 C705[36000000]0000-     	mov dword [arg2Int],0
    91 00000058 0000               
    92 0000005A C705[27000000]0000-     	mov dword [resposta],0
    92 00000062 0000               
    93                                  	;Imprime uma new line no terminal
    94 00000064 6A02                    	push new_line_size
    95 00000066 68[0F010000]            	push new_line
    96 0000006B E83F030000              	call put_string
    97                                  
    98                                  	; Escolha uma opcao:
    99 00000070 6A16                    	push choose_msg_size
   100 00000072 68[40000000]            	push choose_msg
   101 00000077 E833030000              	call put_string
   102                                  
   103                                  ; add operation
   104 0000007C 6A0A                    	push sum_msg_size
   105 0000007E 68[56000000]            	push sum_msg
   106 00000083 E827030000              	call put_string
   107                                  
   108                                  ; sub operation
   109 00000088 6A11                    	push sub_msg_size
   110 0000008A 68[60000000]            	push sub_msg
   111 0000008F E81B030000              	call put_string
   112                                  
   113                                  ; mul operation
   114 00000094 6A15                    	push mul_msg_size
   115 00000096 68[71000000]            	push mul_msg
   116 0000009B E80F030000              	call put_string
   117                                  
   118                                  ; div operation
   119 000000A0 6A0E                    	push div_msg_size
   120 000000A2 68[86000000]            	push div_msg
   121 000000A7 E803030000              	call put_string
   122                                  
   123                                  ; mod operation:
   124 000000AC 6A09                    	push mod_msg_size
   125 000000AE 68[94000000]            	push mod_msg
   126 000000B3 E8F7020000              	call put_string
   127                                  
   128 000000B8 6A0A                    	push quit_msg_size
   129 000000BA 68[9D000000]            	push quit_msg
   130 000000BF E8EB020000              	call put_string
   131                                  
   132                                  ; get operation:
   133 000000C4 6A01                    	push 1
   134 000000C6 68[10000000]            	push option
   135 000000CB E8F6020000              	call get_string
   136                                  
   137                                  	; Faz a logica do menu e a opcao selecionada
   138                                  
   139 000000D0 803D[10000000]31        	cmp byte [option], 31h	; 1d = 31h
   140 000000D7 747D                    	je	add_operation
   141                                  	
   142 000000D9 803D[10000000]32        	cmp byte [option], 32h	; 2d = 32h
   143 000000E0 0F84D5000000            	je	sub_operation
   144                                  	
   145 000000E6 803D[10000000]33        	cmp byte [option], 33h	; 3d = 33h
   146 000000ED 0F842D010000            	je	mul_operation
   147                                  	
   148 000000F3 803D[10000000]34        	cmp byte [option], 34h	; 4d = 34h
   149 000000FA 0F8413020000            	je	div_operation
   150                                  	
   151 00000100 803D[10000000]35        	cmp byte [option], 35h	; 5d = 35h
   152 00000107 0F8491010000            	je	mod_operation
   153                                  	
   154 0000010D 803D[10000000]36        	cmp byte [option], 36h	; 6d = 36h
   155 00000114 0F852CFFFFFF            	jne menu
   156                                  
   157                                  return:
   158 0000011A B801000000              	mov eax, 1			; sys_exit
   159 0000011F BB00000000              	mov ebx, 0
   160 00000124 CD80                    	int 80h
   161                                  
   162                                  
   163                                  
   164                                  
   165                                  
   166                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   167                                  ; PROCEDURE
   168                                  ;
   169                                  espera:
   170 00000126 6A02                    	push new_line_size
   171 00000128 68[0F010000]            	push new_line
   172 0000012D E87D020000              	call put_string
   173 00000132 6A24                    	push press_enter_size
   174 00000134 68[11010000]            	push press_enter_msg
   175 00000139 E871020000              	call put_string
   176 0000013E 68[10000000]            	push option
   177 00000143 E87E020000              	call get_string
   178 00000148 803D[10000000]0A        	cmp byte [option], 0ah
   179 0000014F 75D5                    	jne espera
   180 00000151 E9F0FEFFFF              	jmp menu
   181                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   182                                  ; PROCEDURE - ADICAO
   183                                  ;
   184                                  add_operation:
   185                                  	; mensagem para Digitar o primeiro arg
   186 00000156 6A2C                    	push op1_msg_size
   187 00000158 68[A7000000]            	push op1_msg
   188 0000015D E84D020000              	call put_string
   189                                  	; Funcao para pegar a string e retornar inteiro
   190                                  	; Recebe como argumento o lugar para guardar o inteiro e o lugar da string
   191                                  	
   192 00000162 68[32000000]            	push arg1Int	; Lugar para guardar o inteiro 	
   193 00000167 68[11000000]            	push arg1		; Lugar para armazenar a string do inteiro
   194 0000016C E86C020000              	call get_signed_int
   195                                  
   196 00000171 A1[32000000]            	mov eax,[arg1Int] ;Coloca o numero inteiro no EAX
   197                                  
   198                                  ; Pegar o 2 numero
   199 00000176 6A2B                    	push op2_msg_size
   200 00000178 68[D3000000]            	push op2_msg
   201 0000017D E82D020000              	call put_string
   202                                  
   203 00000182 68[36000000]            	push arg2Int	; Lugar para guardar o inteiro 	
   204 00000187 68[1C000000]            	push arg2		; Lugar para armazenar a string do inteiro
   205 0000018C E84C020000              	call get_signed_int
   206                                  	
   207                                  	
   208                                  	;O resultado é 
   209 00000191 6A11                    	push result_msg_size
   210 00000193 68[FE000000]            	push result_msg
   211 00000198 E812020000              	call put_string
   212                                  	
   213                                  	; é feito a soma dois dois
   214 0000019D A1[32000000]            	mov eax,[arg1Int]
   215 000001A2 8B1D[36000000]          	mov	ebx,[arg2Int]
   216 000001A8 01D8                    	add eax,ebx
   217 000001AA B90A000000              	mov ecx , 10
   218                                  
   219 000001AF 50                      	push eax ; Numero que se deseja escrever na tela
   220 000001B0 51                      	push ecx ; Tamanho do numero inteiro
   221                                  
   222 000001B1 E87F020000              	call int_to_string
   223                                  		
   224 000001B6 E96BFFFFFF              	jmp espera
   225                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   226                                  ; PROCEDURE - SUBTRACAO
   227                                  ;
   228                                  sub_operation:
   229                                  ; mensagem para Digitar o primeiro arg
   230 000001BB 6A2C                    	push op1_msg_size
   231 000001BD 68[A7000000]            	push op1_msg
   232 000001C2 E8E8010000              	call put_string
   233                                  	; Funcao para pegar a string e retornar inteiro
   234                                  	; Recebe como argumento o lugar para guardar o inteiro e o lugar da string
   235                                  	
   236 000001C7 68[32000000]            	push arg1Int	; Lugar para guardar o inteiro 	
   237 000001CC 68[11000000]            	push arg1		; Lugar para armazenar a string do inteiro
   238 000001D1 E807020000              	call get_signed_int
   239                                  
   240 000001D6 A1[32000000]            	mov eax,[arg1Int] ;Coloca o numero inteiro no EAX
   241                                  
   242                                  ; Pegar o 2 numero
   243 000001DB 6A2B                    	push op2_msg_size
   244 000001DD 68[D3000000]            	push op2_msg
   245 000001E2 E8C8010000              	call put_string
   246                                  
   247 000001E7 68[36000000]            	push arg2Int	; Lugar para guardar o inteiro 	
   248 000001EC 68[1C000000]            	push arg2		; Lugar para armazenar a string do inteiro
   249 000001F1 E8E7010000              	call get_signed_int
   250                                  	
   251                                  	
   252                                  	;O resultado é 
   253 000001F6 6A11                    	push result_msg_size
   254 000001F8 68[FE000000]            	push result_msg
   255 000001FD E8AD010000              	call put_string
   256                                  	
   257                                  	; é feito a subtracao dos dois
   258 00000202 A1[32000000]            	mov eax,[arg1Int]
   259 00000207 8B1D[36000000]          	mov	ebx,[arg2Int]
   260 0000020D 29D8                    	sub eax,ebx
   261 0000020F B90A000000              	mov ecx , 10
   262                                  
   263 00000214 50                      	push eax ; Numero que se deseja escrever na tela
   264 00000215 51                      	push ecx ; Tamanho do numero inteiro
   265                                  
   266 00000216 E81A020000              	call int_to_string
   267                                  		
   268 0000021B E906FFFFFF              	jmp espera
   269                                  
   270                                  
   271                                  
   272                                  
   273                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   274                                  ; PROCEDURE - MULTIPLICACAO
   275                                  ;
   276                                  ; mensagem para Digitar o primeiro arg
   277                                  mul_operation:
   278 00000220 6A2C                    	push op1_msg_size
   279 00000222 68[A7000000]            	push op1_msg
   280 00000227 E883010000              	call put_string
   281                                  	; Funcao para pegar a string e retornar inteiro
   282                                  	; Recebe como argumento o lugar para guardar o inteiro e o lugar da string
   283                                  	
   284 0000022C 68[32000000]            	push arg1Int	; Lugar para guardar o inteiro 	
   285 00000231 68[11000000]            	push arg1		; Lugar para armazenar a string do inteiro
   286 00000236 E8A2010000              	call get_signed_int
   287                                  
   288 0000023B A1[32000000]            	mov eax,[arg1Int] ;Coloca o numero inteiro no EAX
   289                                  
   290                                  ; Pegar o 2 numero
   291 00000240 6A2B                    	push op2_msg_size
   292 00000242 68[D3000000]            	push op2_msg
   293 00000247 E863010000              	call put_string
   294                                  
   295 0000024C 68[36000000]            	push arg2Int	; Lugar para guardar o inteiro 	
   296 00000251 68[1C000000]            	push arg2		; Lugar para armazenar a string do inteiro
   297 00000256 E882010000              	call get_signed_int
   298                                  	
   299                                  	
   300                                  	;O resultado é 
   301 0000025B 6A11                    	push result_msg_size
   302 0000025D 68[FE000000]            	push result_msg
   303 00000262 E848010000              	call put_string
   304                                  	
   305                                  	; é feito a multiplicacao dos dois numeros
   306 00000267 A1[32000000]            	mov eax,[arg1Int]
   307 0000026C 8B1D[36000000]          	mov	ebx,[arg2Int]
   308                                  teste:
   309                                  	;zera edx
   310 00000272 29D2                    	sub edx,edx
   311 00000274 F7EB                    	imul ebx
   312 00000276 83FA00                  	cmp word edx,0
   312          ******************       warning: register size specification ignored
   313 00000279 7511                    	jne multiplicacao64bits
   314 0000027B B90A000000              	mov ecx , 10
   315                                  
   316 00000280 50                      	push eax ; Numero que se deseja escrever na tela
   317 00000281 51                      	push ecx ; Tamanho do numero inteiro
   318                                  
   319 00000282 E8AE010000              	call int_to_string
   320                                  		
   321 00000287 E99AFEFFFF              	jmp espera
   322                                  multiplicacao64bits:
   323 0000028C 99                      	CDQ
   324 0000028D B914000000              	mov ecx,20
   325 00000292 50                      	push eax ; Numero que se deseja escrever na tela
   326 00000293 51                      	push ecx ; Tamanho do numero inteiro
   327                                  
   328 00000294 E89C010000              	call int_to_string
   329                                  		
   330 00000299 E988FEFFFF              	jmp espera
   331                                  
   332                                  
   333                                  
   334                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   335                                  ; PROCEDURE - MOD
   336                                  ;
   337                                  mod_operation:
   338                                  ; mensagem para Digitar o primeiro arg
   339 0000029E 6A2C                    	push op1_msg_size
   340 000002A0 68[A7000000]            	push op1_msg
   341 000002A5 E805010000              	call put_string
   342                                  	; Funcao para pegar a string e retornar inteiro
   343                                  	; Recebe como argumento o lugar para guardar o inteiro e o lugar da string
   344                                  	
   345 000002AA 68[32000000]            	push arg1Int	; Lugar para guardar o inteiro 	
   346 000002AF 68[11000000]            	push arg1		; Lugar para armazenar a string do inteiro
   347 000002B4 E824010000              	call get_signed_int
   348                                  
   349 000002B9 A1[32000000]            	mov eax,[arg1Int] ;Coloca o numero inteiro no EAX
   350                                  
   351                                  ; Pegar o 2 numero
   352 000002BE 6A2B                    	push op2_msg_size
   353 000002C0 68[D3000000]            	push op2_msg
   354 000002C5 E8E5000000              	call put_string
   355                                  
   356 000002CA 68[36000000]            	push arg2Int	; Lugar para guardar o inteiro 	
   357 000002CF 68[1C000000]            	push arg2		; Lugar para armazenar a string do inteiro
   358 000002D4 E804010000              	call get_signed_int
   359                                  	
   360                                  	
   361                                  	;O resultado é 
   362 000002D9 6A11                    	push result_msg_size
   363 000002DB 68[FE000000]            	push result_msg
   364 000002E0 E8CA000000              	call put_string
   365                                  	
   366                                  	; é feito a divisao dos dois
   367 000002E5 A1[32000000]            	mov eax,[arg1Int]
   368 000002EA 8B1D[36000000]          	mov	ebx,[arg2Int]
   369 000002F0 29D2                    	sub edx,edx
   370                                  	; Verifica se eax é negativo
   371 000002F2 3DFFFFFF7F              	cmp eax,2147483647
   372 000002F7 7713                    	ja	extende_sinalmod
   373                                  continua_mod:
   374                                  	;idiv pega (EDX:EAX) / EBX
   375 000002F9 F7FB                    	idiv ebx
   376 000002FB B90A000000              	mov ecx , 10
   377                                  
   378 00000300 52                      	push edx ; Numero que se deseja escrever na tela
   379 00000301 51                      	push ecx ; Tamanho do numero inteiro
   380                                  
   381 00000302 E82E010000              	call int_to_string
   382                                  		
   383 00000307 E91AFEFFFF              	jmp espera
   384                                  extende_sinalmod:
   385 0000030C BAFFFFFFFF              	mov edx,4294967295
   386 00000311 EBE6                    	jmp continua_mod
   387                                  
   388                                  
   389                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   390                                  ; PROCEDURE - Divisao
   391                                  ;
   392                                  
   393                                  div_operation:
   394                                  ; mensagem para Digitar o primeiro arg
   395 00000313 6A2C                    	push op1_msg_size
   396 00000315 68[A7000000]            	push op1_msg
   397 0000031A E890000000              	call put_string
   398                                  	; Funcao para pegar a string e retornar inteiro
   399                                  	; Recebe como argumento o lugar para guardar o inteiro e o lugar da string
   400                                  	
   401 0000031F 68[32000000]            	push arg1Int	; Lugar para guardar o inteiro 	
   402 00000324 68[11000000]            	push arg1		; Lugar para armazenar a string do inteiro
   403 00000329 E8AF000000              	call get_signed_int
   404                                  
   405 0000032E A1[32000000]            	mov eax,[arg1Int] ;Coloca o numero inteiro no EAX
   406                                  
   407                                  ; Pegar o 2 numero
   408 00000333 6A2B                    	push op2_msg_size
   409 00000335 68[D3000000]            	push op2_msg
   410 0000033A E870000000              	call put_string
   411                                  
   412 0000033F 68[36000000]            	push arg2Int	; Lugar para guardar o inteiro 	
   413 00000344 68[1C000000]            	push arg2		; Lugar para armazenar a string do inteiro
   414 00000349 E88F000000              	call get_signed_int
   415                                  	
   416                                  	
   417                                  	;O resultado é 
   418 0000034E 6A11                    	push result_msg_size
   419 00000350 68[FE000000]            	push result_msg
   420 00000355 E855000000              	call put_string
   421                                  	
   422                                  	; é feito a divisao dos dois
   423 0000035A A1[32000000]            	mov eax,[arg1Int]
   424 0000035F 8B1D[36000000]          	mov	ebx,[arg2Int]
   425 00000365 29D2                    	sub edx,edx
   426                                  	; Verifica se eax é negativo
   427 00000367 3DFFFFFF7F              	cmp eax,2147483647
   428 0000036C 7713                    	ja	extende_sinaldiv
   429                                  continua_div:
   430                                  	;idiv pega (EDX:EAX) / EBX
   431 0000036E F7FB                    	idiv ebx
   432 00000370 B90A000000              	mov ecx , 10
   433                                  
   434 00000375 50                      	push eax ; Numero que se deseja escrever na tela
   435 00000376 51                      	push ecx ; Tamanho do numero inteiro
   436                                  
   437 00000377 E8B9000000              	call int_to_string
   438                                  		
   439 0000037C E9A5FDFFFF              	jmp espera
   440                                  extende_sinaldiv:
   441 00000381 BAFFFFFFFF              	mov edx,4294967295
   442 00000386 EBE6                    	jmp continua_div
   443                                  
   444                                  
   445                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   446                                  ; PROCEDURE
   447                                  ;
   448                                  put_name:
   449 00000388 29D2                    	sub edx, edx
   450 0000038A 8B4C2404                	mov ecx, [esp + 4]	; string pointer
   451                                  name:
   452 0000038E 80390A                  	cmp byte [ecx], 0ah	; line feed character
   453 00000391 7409                    	je	final_name
   454 00000393 80390D                  	cmp byte [ecx], 13	; enter character
   455 00000396 7404                    	je	final_name
   456 00000398 42                      	inc edx	; size name counter
   457 00000399 41                      	inc ecx	; get next character
   458 0000039A EBF2                    	jmp name
   459                                  
   460                                  final_name:
   461 0000039C 8B4C2404                	mov ecx, [esp + 4]	; restart pointer to initial string character
   462 000003A0 B804000000              	mov eax, 4	; sys_write
   463 000003A5 BB01000000              	mov ebx, 1	; std_out
   464 000003AA CD80                    	int 80h
   465 000003AC C20200                  	ret 2
   466                                  
   467                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   468                                  ; PROCEDURE
   469                                  ;
   470                                  put_string:
   471 000003AF B804000000              	mov eax, 4	; sys_write
   472 000003B4 BB01000000              	mov ebx, 1	; std_out
   473 000003B9 8B4C2404                	mov ecx, [esp + 4]	; string pointer
   474 000003BD 8B542408                	mov edx, [esp + 8] ; string length
   475 000003C1 CD80                    	int 80h
   476 000003C3 C20400                  	ret 4
   477                                  
   478                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   479                                  ; PROCEDURE
   480                                  ;
   481                                  get_string:
   482 000003C6 B803000000              	mov eax, 3	; sys_read
   483 000003CB BB00000000              	mov ebx, 0	; std_out
   484 000003D0 8B4C2404                	mov ecx, [esp + 4]	; string pointer
   485 000003D4 8B542406                	mov edx, [esp + 6] ; string length
   486 000003D8 CD80                    	int 80h
   487 000003DA C20400                  	ret 4
   488                                  
   489                                  
   490                                  
   491                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   492                                  ; PROCEDURE - pegar numero do teclado e transformar em inteiro
   493                                  ;
   494                                  get_signed_int:
   495                                  	;Pega a string e coloca no vetor do argumento
   496 000003DD B803000000              	mov eax, 3	; sys_read
   497 000003E2 BB00000000              	mov ebx, 0	; (teclado)
   498 000003E7 8B4C2404                	mov ecx, [esp + 4]	; Coloca a string do numero digitado nessa posicao
   499 000003EB BA0B000000              	mov edx, 11 ; string length o maximo é 10 algarismos + o sinal = 11
   500 000003F0 CD80                    	int 80h
   501                                  	;Zera os registradores EBX - resultado 
   502 000003F2 29F6                    	sub esi,esi
   503 000003F4 29DB                    	sub ebx,ebx
   504 000003F6 29C0                    	sub eax,eax
   505 000003F8 BF0A000000              	mov edi,10
   506 000003FD 8B4C2404                	mov ecx, [esp + 4] ; LUgar do numero digitado
   507                                  comecoStringToInt: 
   508 00000401 0FB61C31                	movzx ebx,byte [ecx + esi] ; coloca o digito do numero no ebx
   509 00000405 80FB2D                  	cmp bl , 45 ; ASCII do '-'
   510 00000408 7411                    	je	incrementaStringToInt
   511 0000040A 80FB30                  	cmp bl, 48 ; Compara o  digito com 0 - 48d
   512 0000040D 720F                    	jb	fimStringToInt
   513 0000040F 80FB39                  	cmp bl , 57 ; Compara o  digito com 9 - 57d
   514 00000412 770A                    	ja 	fimStringToInt
   515 00000414 80EB30                  	sub bl,30h ; transforma o digito em decimal
   516                                  	
   517 00000417 F7E7                    	mul edi ; Pega o resultado parcial(eax) e multiplica por 10
   518 00000419 01D8                    	add eax,ebx	; O valor final fica em eax
   519                                  incrementaStringToInt:	
   520 0000041B 46                      	inc esi
   521 0000041C EBE3                    	jmp comecoStringToInt
   522                                  fimStringToInt:
   523 0000041E 80392D                  	cmp byte [ecx],45 ; Compara e verifica se o numero é negativo
   524 00000421 7507                    	jne finalStringToInt
   525 00000423 29DB                    	sub ebx,ebx	; Zera ebx
   526 00000425 29C3                    	sub ebx,eax	; Torna o numero negativo
   527 00000427 4E                      	dec esi		; O numero negativo tem -1 o tamanho do esi
   528 00000428 89D8                    	mov eax,ebx	; Coloca ele de novo em EAX
   529                                  finalStringToInt:	
   530 0000042A 8B5C2408                	mov ebx,[esp+8] ; Endereco que guarda o numero inteiro
   531 0000042E 8903                    	mov [ebx],eax	; Numero inteiro
   532 00000430 89F1                    	mov ecx,esi		; Tamanho do numero
   533 00000432 C20800                  	ret 8
   534                                  
   535                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   536                                  ; PROCEDURE
   537                                  ;
   538                                  int_to_string:
   539 00000435 8B442408                	mov eax,[esp+8]		; EAX - Valor a ser impresso na tela
   540                                  	;mov eax,[eax]
   541 00000439 BB[31000000]            	mov	ebx,resposta+10	; EBX - Digito menos significativo do numero
   542 0000043E 3DFFFFFF7F              	cmp eax,2147483647	; Se for maior que esse valor significa que o numero é negativo
   543 00000443 7730                    	ja negativo
   544                                  continuacao:
   545 00000445 8B4C2404                	mov	ecx,[esp+4]	; ECX - O tanto de algarismos que o numero contem
   546 00000449 BF0A000000              	mov	edi,10
   547                                  					;-2147483648	 Maior numero negativo
   548                                  	
   549                                  TransformaEmString:
   550 0000044E BA00000000              	mov	edx,0
   551 00000453 F7F7                    	div	edi
   552 00000455 83C230                  	add	edx,48
   553 00000458 8813                    	mov	[ebx],dl
   554 0000045A 4B                      	dec	ebx
   555 0000045B 49                      	dec ecx
   556 0000045C 75F0                    	jnz TransformaEmString
   557                                  fim:
   558 0000045E B804000000              	mov	eax,4			
   559 00000463 BB01000000              	mov	ebx,1			
   560 00000468 B9[27000000]            	mov	ecx,resposta
   561 0000046D BA0B000000              	mov	edx,11
   562 00000472 CD80                    	int	80h
   563                                  	
   564 00000474 C3                      	ret 
   565                                  
   566                                  negativo:
   567 00000475 C605[27000000]2D        	mov byte [resposta],45
   568 0000047C BAFFFFFFFF              	mov edx,4294967295		; Transforma o numero em negativo
   569 00000481 29C2                    	sub edx,eax		
   570 00000483 89D0                    	mov eax,edx				; Recoloca no registrador EAX
   571 00000485 40                      	inc eax					;
   572 00000486 EBBD                    	jmp continuacao			; VOlta ao procedimento normal
   573                                  
   574                                  
   575                                  
   576                                  
   577                                  	
   578                                  
   579                                  
